<?php

namespace Procountor\Procountor\Response;

use Procountor\Procountor\Interfaces\Read\LedgerReceipt as LedgerReceiptRead;
use Procountor\Procountor\Collection\AttachmentCollection;
use Procountor\Procountor\Collection\TransactionCollection;
use DateTime;
use stdClass;

class LedgerReceipt extends AbstractResponse implements LedgerReceiptRead
{
    private $transactionCollection;

    //Unique identifier of the ledger receipt. Generated by Procountor and present in the object returned. ,
    public function getReceiptId(): ?int
    {
        return $this->data->receiptId;
    }

    //Ledger receipt VAT status. This can be overridden on transaction level. Use here the numeric parts of VAT status codes listed in "VAT defaults" in Procountor. For example, for VAT status code "vat_12", use value 12. The VAT status used must be enabled for the current receipt type (sales/purchase). ,
    public function getVatStatus(): int
    {
        return $this->data->vatStatus;
    }

    //Number of the linked invoice. Automatically generated by Procountor. ,
    public function getInvoiceNumber(): int
    {
        return $this->data->invoiceNumber;
    }

    //List of attachments added to this receipt. Use POST and DELETE /attachments to add and delete attachments.
    public function getAttachments(): ?AttachmentCollection
    {
        if (empty($this->data->attachments)) {
            return null;
        }

        $collection = new AttachmentCollection();
        foreach ($this->data->attachments as $attachmentdata) {
            $attachment = new Attachment($attachmentdata);
            $collection->addItem($attachment);
        }
        return $collection;
    }

    //Ledger receipt type. Use JOURNAL for creating ledger receipts (vouchers) containing ledger transactions without linkage to pre-existing resources. Other types are automatically generated by Procountor for holding accounting information for e.g. invoices. = ['JOURNAL', 'SALES_INVOICE', 'PURCHASE_INVOICE'],
    public function getType(): string
    {
        return $this->data->type;
    }


    //Ledger receipt status. Status of a ledger receipt equals the status of the linked invoice. All ledger receipts are initially created with status UNFINISHED. For journals, possible statuses are UNFINISHED, APPROVED and INVALIDATED. Ledger receipt statuses cannot be directly modified through the API. = ['EMPTY', 'UNFINISHED', 'NOT_SENT', 'SENT', 'RECEIVED', 'PAID', 'PAYMENT_DENIED', 'VERIFIED', 'APPROVED', 'INVALIDATED', 'PAYMENT_QUEUED', 'PARTLY_PAID', 'PAYMENT_SENT_TO_BANK', 'MARKED_PAID', 'STARTED', 'INVOICED', 'OVERRIDDEN', 'DELETED', 'UNSAVED', 'PAYMENT_TRANSACTION_REMOVED'],
    public function getStatus(): ?string
    {
        return $this->data->status ?? null;
    }

    //Ledger receipt name. Max length 80. ,
    public function getName(): string
    {
        return $this->data->name;
    }

    //Ledger receipt date. Must not be in a closed fiscal period. See GET /fiscalyears for a list of fiscal years. ,
    public function getReceiptDate(): DateTime
    {
        return new DateTime($this->data->receiptDate);
    }

    //Ledger receipt VAT type. = ['SALES', 'PURCHASE'],
    public function getVatType(): string
    {
        return $this->data->vatType;
    }

    //Ledger receipt VAT country. Example: SWEDEN. Only for JOURNAL types of ledger receipts. Requires a special right for foreign VATs. = ['See Address.country in POST /invoices for a list of allowable values.'],
    public function getVatProcessing(): ?string
    {
        return $this->data->vatProcessing ?? null;
    }

    //ID of the linked invoice. For sales and purchase invoice ledger receipts, this refers to the invoice the receipt holds accounting data for. For journal receipts, an invoice is automatically generated to store certain data fields. Use this ID in POST /attachments endpoint. ,
    public function getInvoiceId(): ?int
    {
        return $this->data->invoiceId;
    }

    //Invoice notes. Linked to Invoice.notes. Not visible on ledger receipt printouts. Use \n as line break. Max length 10000. ,
    public function getInvoiceNotes(): ?string
    {
        return $this->data->invoiceNotes ?? null;
    }

    //Notes made by the accountant. Visible on ledger receipt printouts. Max length 255. ,
    public function getAccountantsNotes(): ?string
    {
        return $this->data->accountantsNotes ?? null;
    }

    //Transaction description. This is a summary description for any transactions belonging to the ledger receipt. Max length 255. ,
    public function getTransactionDescription(): ?string
    {
        return $this->data->transactionDescription ?? null;
    }

    //Receipt validity time. = ['EMPTY', 'IMMEDIATELY', 'SERVICE_PERIOD', 'OVER_3_YEARS'],
    public function getReceiptValidity(): ?string
    {
        return $this->data->receiptValidity ?? null;
    }

    //Start date of the receipt period. If set, must precede the end date of the period. ,
    public function getPeriodStartDate(): ?DateTime
    {
        if (empty($this->data->periodStartDate)) {
            return null;
        }
        return new DateTime($this->data->periodStartDate);
    }

    //End date of the receipt period. If this and the start date are set, this must be after the start date. ,
    public function getPeriodEndDate(): ?DateTime
    {
        if (empty($this->data->periodEndDate)) {
            return null;
        }
        return new DateTime($this->data->periodEndDate);
    }

    //Partner code. Identifier for the related company or person. May represent a business ID, national identification number (HETU in Finland) or an account number, depending on the receipt type. ,
    public function getPartnerCode(): ?string
    {
        return $this->data->partnerCode ?? null;
    }

    //Ledger receipt version timestamp. Automatically generated by Procountor and updated every time the receipt is modified. When using PUT /ledgerreceipts, it is required to include the latest version timestamp of the receipt to the request. This prevents conflicts if the receipt is being modified from several sources. ,
    public function getVersion(): string
    {
        return $this->data->version;
    }

    //Accounting depreciation method for the receipt. = ['EMPTY', 'REDUCING_BALANCE_25_PERCENT', 'REDUCING_BALANCE_7_PERCENT', 'REDUCING_BALANCE_4_PERCENT', 'STRAIGHT_LINE_DEPRECIATION_3_YEARS', 'STRAIGHT_LINE_DEPRECIATION_5_YEARS'],
    public function getDepreciation(): ?string
    {
        return $this->data->depreciation ?? null;
    }

    //VAT date to be used if payment based VAT is enabled ,
    public function getVatDate(): ?DateTime
    {
        if (empty($this->data->vatDate)) {
            return null;
        }
        return new DateTime($this->data->vatDate);
    }

    //List containing transactions on the receipt. At least one transaction must be provided. ,
    public function getTransactions(): TransactionCollection
    {
        if (!$this->transactionCollection) {
            $collection = new TransactionCollection();
            foreach ($this->data->transactions as $transactiondata) {
                $transaction = new Transaction($transactiondata);
                $collection->addItem($transaction);
            }
            $this->transactionCollection = $collection;
        }
        return $this->transactionCollection;
    }

    public function setTransactions(TransactionCollection $collection): self
    {
        $this->transactionCollection = $collection;
        return $this;
    }
}
